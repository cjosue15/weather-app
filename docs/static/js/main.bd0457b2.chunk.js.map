{"version":3,"sources":["components/SearchCity.js","components/Preloader.js","components/WeatherSide.js","App.js","index.js"],"names":["SearchCity","setCity","useState","query","setQuery","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","Preloader","dayjs","require","WeatherSide","city","data","predictions","img","loading","error","setData","useEffect","getData","a","fetch","response","json","coord","lat","lon","response2","headers","Headers","Authorization","responseImg","photos","daily","splice","map","item","i","id","Math","floor","random","temp","round","day","main","weather","icon","Date","setDate","getDate","format","console","log","cod","message","src","portrait","name","sys","wind","style","textAlign","backgroundImage","data-feather","country","alt","temp_max","temp_min","feels_like","humidity","speed","key","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd0457b2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SearchCity = ({ setCity }) => {\r\n    const [query, setQuery] = useState('');\r\n\r\n    const handleInput = (e) => {\r\n        setQuery(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setCity(query);\r\n        setQuery('');\r\n    };\r\n\r\n    return (\r\n        <form className='search' onSubmit={handleSubmit}>\r\n            <input type='text' placeholder='Busca tu ciudad ðŸ˜€' value={query} onChange={handleInput} />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SearchCity;\r\n","import React from 'react';\r\nimport './Preloader.css';\r\n\r\nconst Preloader = () => {\r\n    return <div className='loader'></div>;\r\n};\r\n\r\nexport default Preloader;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Preloader from './Preloader';\r\nconst dayjs = require('dayjs');\r\n\r\nconst WeatherSide = ({ city }) => {\r\n    const [data, setData] = useState({\r\n        data: {},\r\n        predictions: [],\r\n        img: '',\r\n        loading: false,\r\n        error: false,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getData(city);\r\n    }, [city]);\r\n\r\n    const getData = async (city) => {\r\n        try {\r\n            if (city) {\r\n                setData({\r\n                    data: {},\r\n                    predictions: [],\r\n                    img: '',\r\n                    loading: true,\r\n                    error: false,\r\n                });\r\n\r\n                const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&lang=es&appid=024d45d23e83c80330a78d19d8d88448`);\r\n                const data = await response.json();\r\n                const response2 = await fetch(\r\n                    `https://api.openweathermap.org/data/2.5/onecall?lat=${data.coord?.lat}&lon=${data.coord?.lon}&exclude=minutely,hourly&units=metric&appid=024d45d23e83c80330a78d19d8d88448`\r\n                );\r\n                const responseImg = await fetch(`https://api.pexels.com/v1/search?query=${city}&per_page=1`, {\r\n                    headers: new Headers({\r\n                        Authorization: '563492ad6f917000010000019331042d1ff3469e86b549f1badb5a35',\r\n                    }),\r\n                });\r\n                const { photos } = await responseImg.json();\r\n\r\n                const { daily } = await response2.json();\r\n                const predictions = daily.splice(4).map((item, i) => ({\r\n                    id: Math.floor(Math.random() * 999999),\r\n                    temp: Math.round(item.temp.day),\r\n                    main: item.weather[0].main,\r\n                    icon: item.weather[0].icon,\r\n                    day: dayjs(new Date().setDate(new Date().getDate() + i + 1)).format('ddd'),\r\n                }));\r\n\r\n                console.log(predictions);\r\n\r\n                if (data.cod === '404') {\r\n                    setData({\r\n                        data: data.message,\r\n                        predictions: [],\r\n                        img: '',\r\n                        loading: false,\r\n                        error: true,\r\n                    });\r\n                } else {\r\n                    setData({\r\n                        data: data,\r\n                        predictions: predictions,\r\n                        img:\r\n                            photos[0]?.src.portrait ||\r\n                            'https://images.pexels.com/photos/159020/sunset-sky-afterglow-evening-sky-159020.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260',\r\n                        loading: false,\r\n                        error: false,\r\n                    });\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setData({\r\n                data: {},\r\n                predictions: [],\r\n                img: '',\r\n                loading: false,\r\n                error: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    const { name, sys, main, weather, wind } = data.data;\r\n\r\n    if (data.error) {\r\n        return <p style={{ textAlign: 'center' }}>!Oops la ciudad - {city} no existe ðŸ¥ºðŸ˜¦Â¡</p>;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {data.loading && (\r\n                <div>\r\n                    <Preloader />\r\n                </div>\r\n            )}\r\n            {main && (\r\n                <div className='weather-content'>\r\n                    <div className='weather-side' style={{ backgroundImage: `url(\"${data.img}\")` }}>\r\n                        <div className='weather-gradient'></div>\r\n                        <div className='date-container'>\r\n                            <h2 className='date-dayname'>{`${dayjs().format('dddd')}`}</h2>\r\n                            <span className='date-day'>{`${dayjs().format('D MMMM YYYY')}`}</span>\r\n                            <i className='location-icon' data-feather='map-pin'></i>\r\n                            <span className='location'>{`${name}, ${sys.country}`}</span>\r\n                        </div>\r\n                        <div className='weather-container'>\r\n                            <img className='weather-icon' src={`https://openweathermap.org/img/w/${weather[0].icon}.png`} alt={weather[0].icon} />\r\n                            <h1 className='weather-temp'>{Math.round(main.temp)}Â°C</h1>\r\n                            <h3 className='weather-desc'>{weather[0].main}</h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className='info-side'>\r\n                        <div className='today-info-container'>\r\n                            <div className='today-info'>\r\n                                <div className='precipitation'>\r\n                                    <span className='title'>TEMP MAX</span>\r\n                                    <span className='value'>{Math.round(main.temp_max)} %</span>\r\n                                </div>\r\n                                <div className='precipitation'>\r\n                                    <span className='title'>TEMP MIN</span>\r\n                                    <span className='value'>{Math.round(main.temp_min)} %</span>\r\n                                </div>\r\n                                <div className='precipitation'>\r\n                                    <span className='title'>SENSATION</span>\r\n                                    <span className='value'>{Math.round(main.feels_like)} %</span>\r\n                                </div>\r\n                                <div className='humidity'>\r\n                                    <span className='title'>HUMIDITY</span>\r\n                                    <span className='value'>{main.humidity} %</span>\r\n                                </div>\r\n                                <div className='wind'>\r\n                                    <span className='title'>WIND</span>\r\n                                    <span className='value'>{wind.speed} km/h</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className='week-container'>\r\n                            <ul className='week-list'>\r\n                                {data.predictions.map(({ id, temp, main, icon, day }) => (\r\n                                    <li key={id}>\r\n                                        <img className='day-icon' src={`https://openweathermap.org/img/w/${icon}.png`} alt={main} />\r\n                                        <span className='day-name'>{day}</span>\r\n                                        <span className='day-temp'>{temp}Â°C</span>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default WeatherSide;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport SearchCity from './components/SearchCity';\nimport WeatherSide from './components/WeatherSide';\n\nfunction App() {\n    const [city, setCity] = useState('');\n\n    return (\n        <div id='main'>\n            <SearchCity setCity={setCity} />\n            <WeatherSide city={city} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}